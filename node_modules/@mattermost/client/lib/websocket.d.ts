export type MessageListener = (msg: WebSocketMessage) => void;
export type FirstConnectListener = () => void;
export type ReconnectListener = () => void;
export type MissedMessageListener = () => void;
export type ErrorListener = (event: Event) => void;
export type CloseListener = (connectFailCount: number) => void;
export default class WebSocketClient {
    private conn;
    private connectionUrl;
    private responseSequence;
    private serverSequence;
    private connectFailCount;
    private responseCallbacks;
    /**
     * @deprecated Use messageListeners instead
     */
    private eventCallback;
    /**
     * @deprecated Use firstConnectListeners instead
     */
    private firstConnectCallback;
    /**
     * @deprecated Use reconnectListeners instead
     */
    private reconnectCallback;
    /**
     * @deprecated Use missedMessageListeners instead
     */
    private missedEventCallback;
    /**
     * @deprecated Use errorListeners instead
     */
    private errorCallback;
    /**
     * @deprecated Use closeListeners instead
     */
    private closeCallback;
    private messageListeners;
    private firstConnectListeners;
    private reconnectListeners;
    private missedMessageListeners;
    private errorListeners;
    private closeListeners;
    private connectionId;
    private postedAck;
    constructor();
    initialize(connectionUrl?: string | null, token?: string, postedAck?: boolean): void;
    /**
     * @deprecated Use addMessageListener instead
     */
    setEventCallback(callback: MessageListener): void;
    addMessageListener(listener: MessageListener): void;
    removeMessageListener(listener: MessageListener): void;
    /**
     * @deprecated Use addFirstConnectListener instead
     */
    setFirstConnectCallback(callback: FirstConnectListener): void;
    addFirstConnectListener(listener: FirstConnectListener): void;
    removeFirstConnectListener(listener: FirstConnectListener): void;
    /**
     * @deprecated Use addReconnectListener instead
     */
    setReconnectCallback(callback: ReconnectListener): void;
    addReconnectListener(listener: ReconnectListener): void;
    removeReconnectListener(listener: ReconnectListener): void;
    /**
     * @deprecated Use addMissedMessageListener instead
     */
    setMissedEventCallback(callback: MissedMessageListener): void;
    addMissedMessageListener(listener: MissedMessageListener): void;
    removeMissedMessageListener(listener: MissedMessageListener): void;
    /**
     * @deprecated Use addErrorListener instead
     */
    setErrorCallback(callback: ErrorListener): void;
    addErrorListener(listener: ErrorListener): void;
    removeErrorListener(listener: ErrorListener): void;
    /**
     * @deprecated Use addCloseListener instead
     */
    setCloseCallback(callback: CloseListener): void;
    addCloseListener(listener: CloseListener): void;
    removeCloseListener(listener: CloseListener): void;
    close(): void;
    sendMessage(action: string, data: any, responseCallback?: (msg: any) => void): void;
    userTyping(channelId: string, parentId: string, callback?: () => void): void;
    updateActiveChannel(channelId: string, callback?: (msg: any) => void): void;
    updateActiveTeam(teamId: string, callback?: (msg: any) => void): void;
    updateActiveThread(isThreadView: boolean, channelId: string, callback?: (msg: any) => void): void;
    userUpdateActiveStatus(userIsActive: boolean, manual: boolean, callback?: () => void): void;
    acknowledgePostedNotification(postId: string, status: string, reason?: string, postedData?: string): void;
    getStatuses(callback?: () => void): void;
    getStatusesByIds(userIds: string[], callback?: () => void): void;
}
export type WebSocketBroadcast = {
    omit_users: Record<string, boolean>;
    user_id: string;
    channel_id: string;
    team_id: string;
};
export type WebSocketMessage<T = any> = {
    event: string;
    data: T;
    broadcast: WebSocketBroadcast;
    seq: number;
};
